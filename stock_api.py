# üìÑ stock_api.py

import os
import requests
import logging
import json
from datetime import datetime, timedelta
from app import db
from models import StockPrice
import yfinance as yf
import pandas as pd
from redis import Redis
import time

try:
    from app import conn as redis_conn
except ImportError:
    redis_conn = None
    logging.warning("Redis Ïó∞Í≤∞ÏùÑ Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. Ï∫êÏã±Ïù¥ ÎπÑÌôúÏÑ±ÌôîÎê©ÎãàÎã§.")

logger = logging.getLogger(__name__)

US_STOCKS_LIST = []
US_STOCKS_FILE = 'us_stocks.json'

def load_us_stocks_data():
    global US_STOCKS_LIST
    if US_STOCKS_LIST: return
    try:
        file_exists = os.path.exists(US_STOCKS_FILE)
        if file_exists:
            file_mod_time = datetime.fromtimestamp(os.path.getmtime(US_STOCKS_FILE))
            if (datetime.now() - file_mod_time) < timedelta(days=1):
                with open(US_STOCKS_FILE, 'r') as f:
                    US_STOCKS_LIST = json.load(f)
                logger.info(f"Î°úÏª¨ Ï∫êÏãú ÌååÏùº({US_STOCKS_FILE})ÏóêÏÑú Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ {len(US_STOCKS_LIST)}Í∞ú Î°úÎìú ÏôÑÎ£å.")
                return
        headers = {'User-Agent': 'WealthTracker/1.0 (dev@example.com)'}
        url = "https://www.sec.gov/files/company_tickers.json"
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        all_companies = response.json()
        US_STOCKS_LIST = [
            {'ticker': data['ticker'], 'name': data['title']}
            for data in all_companies.values()
            if '.' not in data['ticker'] and ' ' not in data['ticker']
        ]
        with open(US_STOCKS_FILE, 'w') as f:
            json.dump(US_STOCKS_LIST, f)
        logger.info(f"SECÏóêÏÑú Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ {len(US_STOCKS_LIST)}Í∞ú Î°úÎìú Î∞è ÌååÏùº Ï∫êÏãú ÏôÑÎ£å.")
    except Exception as e:
        logger.error(f"SEC Í∏∞ÏóÖ Ìã∞Ïª§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
        if not US_STOCKS_LIST and os.path.exists(US_STOCKS_FILE):
             with open(US_STOCKS_FILE, 'r') as f:
                US_STOCKS_LIST = json.load(f)
             logger.warning("API Ïã§Ìå®. Í∏∞Ï°¥ Î°úÏª¨ Ï∫êÏãú ÌååÏùºÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.")


class StockAPIService:
    def __init__(self, redis_client: Redis):
        self.session = requests.Session()
        self.cache = redis_client
        self.cache_ttl = timedelta(minutes=30)

    def _get_from_redis_cache(self, key):
        if not self.cache: return None
        cached = self.cache.get(key)
        return json.loads(cached) if cached else None

    def _set_to_redis_cache(self, key, value):
        if not self.cache: return
        self.cache.setex(key, self.cache_ttl, json.dumps(value))

    def get_stock_prices_bulk(self, symbols: list):
        if not symbols: return {}
        
        results = {}
        symbols_to_fetch = []
        for symbol in symbols:
            cache_key = f"price:{symbol}"
            cached_price = self._get_from_redis_cache(cache_key)
            if cached_price:
                results[symbol] = cached_price
            else:
                symbols_to_fetch.append(symbol)
        
        if not symbols_to_fetch:
            return results

        try:
            tickers_str = " ".join(symbols_to_fetch)
            tickers = yf.Tickers(tickers_str)
            for symbol, ticker_obj in tickers.tickers.items():
                # üõ†Ô∏è Fixed: 'progress' Ïù∏ÏàòÎäî yf.Tickers() ÎÇ¥Ïùò Í∞úÎ≥Ñ history() Ìò∏Ï∂úÏóêÏÑú ÏßÄÏõêÎêòÏßÄ ÏïäÏúºÎØÄÎ°ú Ï†úÍ±∞Ìï©ÎãàÎã§.
                hist = ticker_obj.history(period="2d", auto_adjust=True)
                if not hist.empty and len(hist) >= 2:
                    price_data = {
                        'price': float(hist['Close'].iloc[-1]),
                        'change': float(hist['Close'].iloc[-1] - hist['Close'].iloc[-2]),
                        'change_percent': float((hist['Close'].iloc[-1] / hist['Close'].iloc[-2] - 1) * 100)
                    }
                elif not hist.empty:
                    price_data = {'price': float(hist['Close'].iloc[-1]), 'change': 0, 'change_percent': 0}
                else:
                    continue

                results[symbol] = price_data
                self._set_to_redis_cache(f"price:{symbol}", price_data)
                self._update_db_cache(symbol, price_data)

        except Exception as e:
            logger.error(f"yfinance Î≤åÌÅ¨ Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå® ({symbols_to_fetch}): {e}")

        return results
        
    def get_stock_profiles_bulk(self, symbols: list):
        if not symbols: return {}

        results = {}
        symbols_to_fetch = []
        for symbol in symbols:
            cache_key = f"profile:{symbol}"
            cached_profile = self._get_from_redis_cache(cache_key)
            if cached_profile:
                results[symbol] = cached_profile
            else:
                symbols_to_fetch.append(symbol)

        if not symbols_to_fetch:
            return results
        
        try:
            tickers_str = " ".join(symbols_to_fetch)
            tickers = yf.Tickers(tickers_str)
            for symbol, ticker_obj in tickers.tickers.items():
                try:
                    info = ticker_obj.info
                    profile_data = {
                        'name': info.get('longName', symbol),
                        'sector': info.get('sector', 'ETF' if info.get('quoteType') == 'ETF' else 'N/A'),
                        'logo_url': info.get('logo_url')
                    }
                except Exception:
                     profile_data = {'name': symbol, 'sector': 'N/A', 'logo_url': None}

                results[symbol] = profile_data
                self._set_to_redis_cache(f"profile:{symbol}", profile_data)
        except Exception as e:
            logger.error(f"yfinance Î≤åÌÅ¨ ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå® ({symbols_to_fetch}): {e}")

        return results

    def get_stock_price(self, symbol):
        time.sleep(0.1)
        cache_key = f"price:{symbol}"
        cached_price = self._get_from_redis_cache(cache_key)
        if cached_price: return cached_price
        
        db_cached = StockPrice.query.filter_by(symbol=symbol).first()
        if db_cached and (datetime.utcnow() - db_cached.last_updated) < self.cache_ttl:
            return {'price': db_cached.current_price, 'change': db_cached.change, 'change_percent': db_cached.change_percent}

        try:
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="2d", auto_adjust=True)
            if not hist.empty and len(hist) >= 2:
                price_data = {
                    'price': float(hist['Close'].iloc[-1]),
                    'change': float(hist['Close'].iloc[-1] - hist['Close'].iloc[-2]),
                    'change_percent': float((hist['Close'].iloc[-1] / hist['Close'].iloc[-2] - 1) * 100)
                }
            elif not hist.empty:
                price_data = {'price': float(hist['Close'].iloc[-1]), 'change': 0, 'change_percent': 0}
            else:
                return None
        except Exception as e:
            logger.error(f"yfinance Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå® ({symbol}): {e}")
            if db_cached:
                return {'price': db_cached.current_price, 'change': db_cached.change, 'change_percent': db_cached.change_percent}
            return None

        self._set_to_redis_cache(cache_key, price_data)
        self._update_db_cache(symbol, price_data)
        return price_data

    def get_stock_profile(self, symbol):
        time.sleep(0.1)
        cache_key = f"profile:{symbol}"
        cached_profile = self._get_from_redis_cache(cache_key)
        if cached_profile: return cached_profile

        try:
            info = yf.Ticker(symbol).info
            profile_data = {
                'name': info.get('longName', symbol),
                'sector': info.get('sector', 'ETF' if info.get('quoteType') == 'ETF' else 'N/A'),
                'logo_url': info.get('logo_url')
            }
        except Exception as e:
            logger.warning(f"ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå® ({symbol}): {e}")
            profile_data = {'name': symbol, 'sector': 'N/A', 'logo_url': None}

        self._set_to_redis_cache(cache_key, profile_data)
        return profile_data

    def _update_db_cache(self, symbol, price_data):
        with db.session.no_autoflush:
            cached = StockPrice.query.filter_by(symbol=symbol).first()
            if not cached:
                cached = StockPrice(symbol=symbol)
                db.session.add(cached)
            cached.current_price = float(price_data['price'])
            cached.change = float(price_data.get('change', 0))
            cached.change_percent = float(price_data.get('change_percent', 0))
            cached.last_updated = datetime.utcnow()
            db.session.commit()
    
    def get_price_history(self, symbol, period='6mo'):
        cache_key = f"history:{symbol}:{period}"
        cached_history = self._get_from_redis_cache(cache_key)
        if cached_history: return cached_history
        try:
            hist = yf.Ticker(symbol).history(period=period, auto_adjust=True)
            if hist.empty: return None
            
            hist.index = hist.index.strftime('%Y-%m-%d')
            price_history = {
                'dates': list(hist.index),
                'prices': [round(p, 2) for p in hist['Close']]
            }
        except Exception as e:
            logger.error(f"ÏãúÏÑ∏ Í∏∞Î°ù Ï°∞Ìöå Ïã§Ìå® ({symbol}): {e}")
            return None
        
        self._set_to_redis_cache(cache_key, price_history)
        return price_history

stock_api = StockAPIService(redis_conn)
